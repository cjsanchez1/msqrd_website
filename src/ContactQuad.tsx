/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 public/3D/ContactQuad.glb -t s -r public 
*/

import * as THREE from 'three'
import React, { useMemo, useRef } from 'react'
import { shaderMaterial, useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { extend, useFrame, useLoader } from '@react-three/fiber'

const vertexShader = `
uniform float time;

varying vec2 vUv;

void main() {
  vUv = vec2(uv.x, 1.0-uv.y);

  vec4 modelPosition = modelMatrix * vec4(position, 1.0);
  vec4 viewPosition = viewMatrix * modelPosition;
  vec4 projectedPosition = projectionMatrix * viewPosition;
  gl_Position = projectedPosition;

  // gl_Position = projectedPosition;
  //vNormal = normalize(normalMatrix * normal);
}
`

const fragShader = `
uniform float time;
uniform sampler2D uTexture;

varying vec2 vUv;

void main() {
  // 500.0 is an arbitrary value to "normalize"
  // my coordinate system
  // In these examples consider the value of x 
  // to go from 0 to 1.
  //float x = gl_FragCoord.x / 500.0;
  // vec3 color = vec3(x);
  // gl_FragColor = vec4(color,1.0);

  vec3 texture = texture2D(uTexture, vUv).rgb;
  //gl_FragColor = vec4(sin(time),0,0,1);
  gl_FragColor = vec4(vUv, 1, 1);

  float anim = sin(texture.x * 150.0 + time * 2.0);
  gl_FragColor = vec4(anim, anim, anim, 1);
}
`

type GLTFResult = GLTF & {
  nodes: {
    contact: THREE.Mesh
  }
  materials: {}
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function ContactQuad(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/3D/ContactQuad.glb') as GLTFResult

  // const portalMat = new PortalMaterial()
  
  const sdfTex = useLoader(THREE.TextureLoader, "imgs/msqrd_sdf.png")
  // const sdfTex = useLoader(THREE.DataTextureLoader, "imgs/msqrd_sdf.exr")

  const uniforms = useMemo(
    () => ({
      time: { value:0 },
      uTexture: { value: sdfTex }
    }), []
  )
  const shaderRef = useRef<THREE.ShaderMaterial>(null!);
  useFrame(({ clock }) => {
    // if (shaderRef.current) {
    //   shaderRef.current.uniforms.time = {value: clock.getElapsedTime()}
    // }
    uniforms.time.value = clock.getElapsedTime()
  });

  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.contact.geometry}>
      <shaderMaterial 
        attach={"material"} 
        vertexShader={vertexShader} 
        fragmentShader={fragShader} 
        uniforms={uniforms}
        ref={shaderRef}/>
      </mesh>
    </group>
  )
}

useGLTF.preload('/3D/ContactQuad.glb')
