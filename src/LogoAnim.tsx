/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 public/3D/logo_anim.glb -t -r public 
*/

import * as THREE from 'three'
import { useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useFrame } from '@react-three/fiber'

type GLTFResult = GLTF & {
  nodes: {
    _Geo_Skinned: THREE.SkinnedMesh
    ['root']: THREE.Bone
  }
  materials: {}
}

//type ActionName = 'logo_anim'
//type GLTFActions = Record<ActionName, THREE.AnimationAction>
//type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['skinnedMesh'] | JSX.IntrinsicElements['bone']>>

const modelPath = '/3D/logo_anim.glb'

export function LogoAnim(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>(null!)
  const { nodes, materials, animations } = useGLTF(modelPath) as GLTFResult
  const { actions } = useAnimations(animations, group)

  nodes._Geo_Skinned.castShadow = true;
  nodes['root'].castShadow = true;

  // I added this to animate the object
  let anim: THREE.AnimationAction | null = null
  useFrame(() => {
    if (anim == null){ // gotta do this, since object might not be fully loaded yet
      anim = actions["logo_anim"]
      anim?.play()
    }
    else {
    }
  })

  return (
    <group {...props} dispose={null} ref={group} position={[0,-0.04,0]}>
      <primitive object={nodes['root']} />
      <skinnedMesh castShadow={true} name="_Geo_Skinned" geometry={nodes._Geo_Skinned.geometry} material={nodes._Geo_Skinned.material} skeleton={nodes._Geo_Skinned.skeleton} />
    </group>
  )
}

useGLTF.preload(modelPath)
