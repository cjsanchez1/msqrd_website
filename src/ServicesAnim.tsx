/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 public/3D/ServicesAnim.glb -t s -r public 
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useFrame } from '@react-three/fiber'

type GLTFResult = GLTF & {
  nodes: {
    attribpromote1: THREE.SkinnedMesh
    root: THREE.Bone
  }
  materials: {
    principledshader: THREE.MeshStandardMaterial
  }
}

type ActionName = 'anim'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['skinnedMesh'] | JSX.IntrinsicElements['bone']>>

export function ServicesAnim(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>(null!)
  const { nodes, materials, animations } = useGLTF('/3D/ServicesAnim.glb') as GLTFResult
  const { actions } = useAnimations(animations, group)

  materials.principledshader.transparent = true
  materials.principledshader.roughness = 0.2
  materials.principledshader.metalness = 0
  materials.principledshader.forceSinglePass = false
  nodes.attribpromote1.castShadow = true
  // materials.principledshader.color = new THREE.Color(1,0,0)

  // I added this to animate the object
  let anim: THREE.AnimationAction | null = null
  useFrame(() => {
    if (anim == null){ // gotta do this, since object might not be fully loaded yet
      anim = actions["anim"]
      anim?.play()
    }
  })

  return (
    <group ref={group} {...props} dispose={null}>
      <group>
        <primitive object={nodes.root} />
        <skinnedMesh name="attribpromote1" geometry={nodes.attribpromote1.geometry} material={materials.principledshader} skeleton={nodes.attribpromote1.skeleton} />
      </group>
    </group>
  )
}

useGLTF.preload('/3D/ServicesAnim.glb')
